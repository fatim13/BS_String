class Solution {
    int isPalindrome(String S) {
    
       int n = S.length();
       
       String original = S;
       
       char ch[] = S.toCharArray();
       
       for(int i = 0; i<n/2; i++){
           
          char temp = ch[i];
          ch[i] = ch[n-1-i];
          ch[n-1-i] = temp;
       }
       
       String str = String.valueOf(ch);
       
       if(str.equals(original))  //O(n)
       return 1;
       
       return 0;
    }
};

/*above solutions is not optimized
/used extera space to convert String to array of character
/convert string to integer.. which takes extera space
//comparing the value using eqaul method which take O(n) TC
*/

*OPTIMIZED appraoch
//below codes compares the value in-place without extera memory


class Solution {
    int isPalindrome(String S) {
    
       int n = S.length();
       
       int i = 0;
       int j = S.length()-1;
       
       while(i < j){
           if(S.charAt(i) == S.charAt(j)){
               i++;
               j--;
           }
           else{
               return 0;
           }
       }
       return 1;
    }
};

// more optimize way
      int i = 0;
       int j = S.length()-1;
       
       while(i < j){
           if(S.charAt(i) != S.charAt(j)){
                return 0;
           }
           i++;
           j--;
           
       }


//more optimize way to resuce the line of code
class Solution {
    int isPalindrome(String S) {
    
       int n = S.length();
      
       
      for(int i = 0; i < n/2; i++){
           if(S.charAt(i) != S.charAt(n-1-i)){
                return 0;
           }
       }
       return 1;
    }
};